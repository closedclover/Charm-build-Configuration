import groovy.json.JsonBuilder
import groovy.json.JsonSlurper

// Load props from parent gradle.properties.
def props = new Properties()
file("gradle.properties").withInputStream { props.load(it) }

base {
    archivesName = "${props.mod_id}-neoforge-${props.minecraft_version}"
    version = props.mod_version
    group = props.maven_group
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

sourceSets {
    main {
        java {
            srcDir "src/main/java"
        }  
        resources {
            srcDir 'src/main/resources'
        }
    }
}

neoForge {
    version = "${props.neoforge_version}"
    validateAccessTransformers = true

    runs {
        client {
            client()
        }
        data {
            data()
        }
        server {
            server()
        }
    }

    mods {
        testproject {
            sourceSet sourceSets.main
        }
    }
}

processResources {
    inputs.property "mod_version", props.mod_version

    // Replace ${mod_version}, ${minecraft_version} and ${loader} with the correct values.
    filesMatching(["META-INF/neoforge.mods.toml", "pack.mcmeta"]) {
        expand (
            "author": props.author,
            "mod_id": props.mod_id,
            "mod_version": props.mod_version,
            "architectury_version_range": props.architectury_version_range,
            "minecraft_version_range": props.minecraft_version_range,
            "neoforge_version_range": props.neoforge_version_range,
            "discord_link": props.discord_link
        )
    }

//    // Replace ${refmap_file} in all json files with the full path to the generated refmap.
//    filesMatching([props.mod_id + ".mixins.json", props.mod_id + ".charmony.client.mixins.json", props.mod_id + ".charmony.common.mixins.json"]) {
//        expand "refmap_file": props.mod_id + "-neoforge-${props.minecraft_version}" + "-refmap.json"
//    }
    
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)

    // Expand resource templates.
    filesMatching("**/*.template.json") {
        JsonBuilder json = new JsonBuilder(new JsonSlurper().parseText(it.file.text))
        String template = new JsonBuilder(json.content.template).toPrettyString()
        def v = json.content.variants
        Iterable<String> variants
        if (v instanceof String) {
            def f = file("${sourceSets.main.resources.srcDirs[0]}/META-INF/variants/${v}.variants");
            if (!f.exists()) {
                throw new Exception("Can't find ${f.name}")
            }
            variants = f.readLines().findAll { !it.isEmpty() }
        }
        else variants = v
        File dir = it.relativePath.parent.getFile(file("$buildDir/resources/main"))
        dir.mkdirs()
        String name = it.name.replace(".template.json", ".json")
        // String[] replacements = v instanceof String ? variants.remove(0).split(':') : ["VARIANT"]
        String[] replacements = variants.remove(0).split("\\|");
        for (variant in variants) {
            Map<String, String> s = [replacements, variant.split("\\|", -1)].transpose().collectEntries()
            def file = new File(dir, s.inject(name) { r, e -> r.replace(e.key, e.value) })
            if (!file.exists()) {
                file.createNewFile()
                file.text = s.inject(template) { r, e -> r.replace(e.key, e.value) }
            }
        }
        it.exclude()
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.release = 21
}

repositories {
    flatDir {
        dir 'libs'
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesName}"}
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
            "Specification-Title": project.fileName,
            "Specification-Vendor": project.author,
            "Specification-Version": project.mod_version,
            "Implementation-Title": project.fileName,
            "Implementation-Version": project.mod_version,
            "Implementation-Vendor" : project.author,
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
}

